#!/usr/bin/env ruby
# frozen_string_literal: true

require 'debug'

Location = Struct.new(:x, :y)

class Guard
  LOOK_UP = '^'
  LOOK_DOWN = 'v'
  LOOK_RIGHT = '>'
  LOOK_LEFT = '<'
  DIRECTIONS = [LOOK_UP, LOOK_RIGHT, LOOK_DOWN, LOOK_LEFT].cycle

  attr_accessor :lab_map, :current_location, :visited_locations, :current_direction

  def initialize(lab_map:, start_location:, direction:)
    @current_location = start_location
    @current_direction = direction
    @lab_map = lab_map
    @visited_locations = [current_location.clone]
  end

  def move!
    self.lab_map[y][x] = 'X'

    case current_direction
    when LOOK_UP then current_location.y -= 1
    when LOOK_DOWN then current_location.y += 1
    when LOOK_LEFT then current_location.x -= 1
    when LOOK_RIGHT then current_location.x += 1
    end

    return if out?

    self.lab_map[y][x] = current_direction

    self.visited_locations << current_location.clone
  end

  def obstacle_ahead?
    case current_direction
    when LOOK_UP then lab_map.fetch(y - 1, [])[x] == '#'
    when LOOK_RIGHT then lab_map.fetch(y, [])[x + 1] == '#'
    when LOOK_DOWN then lab_map.fetch(y + 1, [])[x] == '#'
    when LOOK_LEFT then lab_map.fetch(y, [])[x - 1] == '#'
    end
  end

  def turn!
    self.current_direction = DIRECTIONS.next
    self.lab_map[y][x] = self.current_direction
    self.current_location = Location.new(x:, y:)
  end


  def out? = x < 0 || x >= lab_map[0].size || y < 0 || y >= lab_map.size

  def x = current_location.x

  def y = current_location.y

#   def detect_loop? = @previous_states[...-1].include?([row, col, direction])
end


def follow(guard:)
  return guard if guard.out?

  if guard.obstacle_ahead?
    guard.turn!
  else

    guard.move!
    # given the state of the world make one simulation where the next would be turn! find if it loops if so count
    # continue the current run
    # TODO: why does it give me one less?
  end


  return follow(guard:)
end

input = <<~TEST_INPUT
  ....#.....
  .........#
  ..........
  ..#.......
  .......#..
  ..........
  .#..^.....
  ........#.
  #.........
  ......#...
TEST_INPUT

input = IO.read('input.txt')

start = input.delete("\n").index(Guard::LOOK_UP)
lab_map = input.split("\n").map { |line| line.chars }
x = start % lab_map.size
y = start / lab_map[0].size


start_location = Location.new(x:, y:)
guard = Guard.new(lab_map:, start_location:, direction: Guard::LOOK_UP)
# debugger

guard = follow(guard:)
# puts guard.lab_map.map{|m|m.join}
# puts "---------------"
# lab_map[0].size.times do|xi|
#   lab_map[0].size.times do|yi|
#     print guard.visited_locations.include?(Location.new(x: yi, y: xi)) ? 'X' : '.'
#   end
#   print "\n"
# end

puts guard.visited_locations
