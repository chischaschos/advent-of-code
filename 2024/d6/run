#!/usr/bin/env ruby
# frozen_string_literal: true

require 'debug'
require_relative 'solution'

input = <<~TEST_INPUT
  ....#.....
  .........#
  ..........
  ..#.......
  .......#..
  ..........
  .#..^.....
  ........#.
  #.........
  ......#...
TEST_INPUT

# input = IO.read('input.txt')

start = input.delete("\n").index(Guard::LOOK_UP)
lab_map = input.split("\n").map(&:chars)
x = start % lab_map.size
y = start / lab_map[0].size

guard = Guard.new(lab_map: lab_map.map(&:clone), x:, y:)
follow(guard:)

visited_locations = guard.visited_locations.keys
uniq_visited_locations = visited_locations.uniq do |l|
  [l.y, l.x]
end.count
puts "# of visited locations: #{uniq_visited_locations}"

loops_found_count = visited_locations.uniq do |l|
  [l.x, l.y]
end.map do |l|
  next if l.x == x && l.y == y

  new_lab_map = lab_map.map(&:clone)
  guard = Guard.new(lab_map: new_lab_map, x:, y:)
  guard.add_wall!(l)
  found = follow(guard:).loop_found?

  # if found
  #   puts guard.printable_map
  #   puts "--------------"
  # end

  found
end.count { |l| l }
puts "# of loops_found: #{loops_found_count}"
